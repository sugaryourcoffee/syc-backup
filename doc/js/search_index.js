var search_data = {"index":{"searchIndex":["backup","cronedit","environment","filebackup","mysqlbackup","options","process","runner","testcronedit","testenvironment","testfilebackup","testmysqlbackup","testoptions","testprocess","add_command()","backup()","backup()","backup()","check_for_inexistent()","cleanup()","compress()","compress()","crontab_count()","new()","new()","new()","new()","new()","remove_command()","ruby()","run()","setup()","setup()","teardown()","teardown()","readme","rakefile"],"longSearchIndex":["backup","backup::cronedit","backup::environment","backup::filebackup","backup::mysqlbackup","backup::options","backup::process","backup::runner","testcronedit","testenvironment","testfilebackup","testmysqlbackup","testoptions","testprocess","backup::cronedit#add_command()","backup::filebackup#backup()","backup::mysqlbackup#backup()","backup::process#backup()","backup::filebackup#check_for_inexistent()","backup::cronedit#cleanup()","backup::filebackup#compress()","backup::mysqlbackup#compress()","testcronedit#crontab_count()","backup::filebackup::new()","backup::mysqlbackup::new()","backup::options::new()","backup::process::new()","backup::runner::new()","backup::cronedit#remove_command()","backup::environment::ruby()","backup::runner#run()","testfilebackup#setup()","testprocess#setup()","testfilebackup#teardown()","testprocess#teardown()","",""],"info":[["Backup","","Backup.html","","<p>Backup contains functions to backup a MySQL database and files and\ndirectories to a default or specified …\n"],["Backup::CronEdit","","Backup/CronEdit.html","","<p>Adds or removes a command to the user’s crontab. To make sure that the Ruby\napplication is invoked as …\n"],["Backup::Environment","","Backup/Environment.html","","<p>Reads and filters the user’s environment variables to meet Ruby and Gem\nrequirements to run the application …\n"],["Backup::FileBackup","","Backup/FileBackup.html","","<p>Backup directories and files to a backup directory\n"],["Backup::MySQLBackup","","Backup/MySQLBackup.html","","<p>MySQLBackup creates a dump file of a MySQL database with <em>mysqldump</em>\nand returns the dump file.\n"],["Backup::Options","","Backup/Options.html","","<p>Parses the command line options the user has provided on the command line\n"],["Backup::Process","","Backup/Process.html","","<p>Conducts the backups of a MySQL database and files.\n"],["Backup::Runner","","Backup/Runner.html","","<p>Is invoked from the command line application and invokes the application’s\noptons as provided by the …\n"],["TestCronEdit","","TestCronEdit.html","","<p>Test for CronEdit will add commands to the users crontab. After each test\nthe test entries are removed. …\n"],["TestEnvironment","","TestEnvironment.html","","<p>Tests Environment class to return the variables neccessary for running a\nRuby application as a cron job …\n"],["TestFileBackup","","TestFileBackup.html","","<p>Tests the FileBackup class.\n"],["TestMySQLBackup","","TestMySQLBackup.html","","<p>Tests for MySQLBackup class.\n<p>Expects a running MySQL database server with following data\n<p>table &mdash; test\n"],["TestOptions","","TestOptions.html","","<p>Test that user input is correctly interpreted and provided to other classes\nover methods.\n"],["TestProcess","","TestProcess.html","","<p>Test for the Process class. Tests copy and compress commands\n"],["add_command","Backup::CronEdit","Backup/CronEdit.html#method-i-add_command","(command, environment=[])","<p>Adds a command to the user’s crontab. If the provided command is empty\nadd_command will exit the application …\n"],["backup","Backup::FileBackup","Backup/FileBackup.html#method-i-backup","(backup_folder)","<p>The files to be backed up are initilized when creating an instance of\nFileBackup. These files are then …\n"],["backup","Backup::MySQLBackup","Backup/MySQLBackup.html#method-i-backup","(backup_folder=\"./\")","<p>Creates a MySQL dump file and returns the file\n"],["backup","Backup::Process","Backup/Process.html#method-i-backup","()","<p>Creates the backup of the database and the files. If at least one of the\nprovided files doesn’t exist …\n"],["check_for_inexistent","Backup::FileBackup","Backup/FileBackup.html#method-i-check_for_inexistent","(files)","<p>Checks if the files all exist. Files that do not exist are returned in an\nArray\n"],["cleanup","Backup::CronEdit","Backup/CronEdit.html#method-i-cleanup","()","<p>Removes the CRON_ENTRIES_FILE after the values have been written to crontab\n"],["compress","Backup::FileBackup","Backup/FileBackup.html#method-i-compress","(files, backup_folder)","<p>Compress the files to the backup directory\n"],["compress","Backup::MySQLBackup","Backup/MySQLBackup.html#method-i-compress","(backup_file)","<p>Compresses the MySQL dump file. If an error occurs when compressing the\nfile an error message is printed …\n"],["crontab_count","TestCronEdit","TestCronEdit.html#method-i-crontab_count","(command)","<p>Determines the count of the provided <em>command</em> in the crontab.\n"],["new","Backup::FileBackup","Backup/FileBackup.html#method-c-new","(files=[])","<p>Initializes the files to be backed up. If no file is provided an error is\nreturned\n"],["new","Backup::MySQLBackup","Backup/MySQLBackup.html#method-c-new","(database, user, password)","<p>database is the database to be backed up with the user that has the\ncredentials to access the database …\n"],["new","Backup::Options","Backup/Options.html#method-c-new","(argv)","<p>Takes the arguments from the command line and parses them\n"],["new","Backup::Process","Backup/Process.html#method-c-new","(backup_folder, files, override, no_compress)","<p>Takes the backup_folder where the files are backed up to. If override is\nprovided the files in the backup …\n"],["new","Backup::Runner","Backup/Runner.html#method-c-new","(argv)","<p>Takes the command line options and parses them\n"],["remove_command","Backup::CronEdit","Backup/CronEdit.html#method-i-remove_command","(command)","<p>Removes a command from the user’s crontab. If the provided command is \nempty remove_command will exit …\n"],["ruby","Backup::Environment","Backup/Environment.html#method-c-ruby","()","<p>Retrieves the environment variables that are required running a Ruby\napplication as a cron job. The variable …\n"],["run","Backup::Runner","Backup/Runner.html#method-i-run","()","<p>Operates on the options and invokes the respective functions\n"],["setup","TestFileBackup","TestFileBackup.html#method-i-setup","()","<p>Create files to be backed up\n"],["setup","TestProcess","TestProcess.html#method-i-setup","()","<p>Create files to backup\n"],["teardown","TestFileBackup","TestFileBackup.html#method-i-teardown","()","<p>Remove files previously created with setup and all created files and\ndirectories during processing backups …\n"],["teardown","TestProcess","TestProcess.html#method-i-teardown","()","<p>Remove files that have created with setup and all files and directories\ncreated during backup processing …\n"],["README","","README_rdoc.html","","<p>Backup utility for database, folders and files\n<p>Backs up a MySQL database, folders and files to a default …\n"],["Rakefile","","Rakefile.html","","<p>require ‘rake/testtask’\n<p>Rake::TestTask.new do |t|\n\n<pre>t.libs &lt;&lt; 'test'\nt.test_files = FileList['test/test_*.rb']</pre>\n"]]}}